-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Inspired by <a><a>https://riak.com/assets/bitcask-intro.pdf</a></a>.
@package bitcask-hs
@version 0.1.0.0

module Entry
data Entry
Entry :: Checksum -> Timestamp -> FieldSize -> FieldSize -> Key -> Value -> Entry
type Checksum = Word32
type Timestamp = Int64
type FieldSize = Int64
type Key = ByteString
type Value = ByteString
matchChecksum :: Entry -> Bool
nanosSinceEpoch :: IO Timestamp
buildEntry :: Timestamp -> Key -> Value -> Entry
getEntryLength :: Entry -> Int
instance GHC.Classes.Eq Entry.Entry
instance GHC.Show.Show Entry.Entry

module Serializable
class Serializable a
encode :: Serializable a => a -> ByteString
decode :: Serializable a => ByteString -> a
instance Serializable.Serializable Entry.Entry

module Caskfile
getFileIdFromPath :: FilePath -> Int
listCaskFiles :: FilePath -> IO [FilePath]
removePrevFiles :: FilePath -> IO ()
getLastFileId :: FilePath -> IO Int
getCurrentFileId :: FilePath -> IO Int
prependEntry :: FilePath -> Entry -> IO Entry
readEntryFromPos :: FilePath -> Int64 -> Int64 -> Int64 -> IO Entry
createCaskLock :: FilePath -> IO ()
readEntries :: FilePath -> IO [(Int, Entry)]

module Keydir
mapEntriesToKeydir :: FilePath -> [(Int, Entry)] -> Keydir
getValueFromKeydir :: Keydir -> Key -> IO (Maybe Value)
buildKeyDir :: FilePath -> IO Keydir
listKeysFromKeydir :: Keydir -> [Key]
instance GHC.Classes.Eq Keydir.KeydirEntry
instance GHC.Show.Show Keydir.KeydirEntry

module Bitcask
open :: String -> Bool -> IO (Either String Handle)
put :: Handle -> Key -> Value -> IO (Either String Entry)
get :: Handle -> Key -> IO (Maybe Value)
delete :: Handle -> Key -> IO (Either String ())
listKeys :: Handle -> IO [Key]
merge :: Handle -> IO (Either String Handle)
close :: Handle -> IO ()
instance GHC.Show.Show Bitcask.Handle
